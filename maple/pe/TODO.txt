To Do List and Known Issues

Major features that are needed:

- Better support for loops
- Better support for partially static closures.
- Support for Matrix/Vector/Array
- Structured type creation
  - eg) if x::integer and y::integer then type(x=y, integer=integer) is 
    static and true
  - Rudamentary type inference? (at least across assignments)
  
  
  
Known Issues:

- The splitting transformation probably should not take place inside of uneval quotes.
For example:
    if type(x, 'f(x)') then...
Should not become
    m1 := f(x);
    if type(x, 'm1') then...
    
    
- I've been working on getting GLA code to work. Actually I was in the process of creating a 
test for MatrixMatrixMultiply when I found a subtle but nasty bug.

This is the code that is output:

proc (x, y) local n1, p1, m6, C1, i1, j1;
    if op(1,x)[2] <> op(1,y)[1] then
        error "first matrix column dimension (%1) <> second matrix row dimension (%2)", op(1,x)[2], op(1,y)[1]
    end if;
   
    n1, p1 := op(1,x);
    m6 := op(1,y)[2];
    C1 := Matrix(n1,m6);
    for i1 to n1 do
        for j1 to m6 do
            C1[i1,j1] := `+`(seq(x[i1,k]*y[k,j1],k = 1..p1))
        end do
    end do;
    C1
end proc;

The problem is that k is not declared in the locals section, it should be because its declared 
as a local in the original code. The reason this happens is because unassigned locals evaluate 
statically to themselves, so the reducer produces MStatic(k) and thats what gets residualized. 
When the result gets converted to inert form MStatic gets converted to _Inert_VERBATIM which 
maple seems to be converting to _Inert_LOCALNAME. To fix this bug I think I would need to keep track
of which static symbols are actually locals and so to convert them back to locals instead of 
_Inert_VERBATIM. Of course I would also have to avoid name capture when inlining.

Jacques:
True, but that 'k' likely has type(k,local) = true.   That's probably 
how maple knows to convert it to an _Inert_LOCALNAME. 

The question is, should unassigned locals evaluate (statically!) to 
MLocal(...) ?

Another really easy hack would be to do an indets(..., 'local') on an 
MStatic about to be converted to an _Inert_VERBATIM and patch up all
 the 
names you get there to *new* locals in the current procedure.  Name 
capture should not be a big issue, though name duplication might be a 
real problem.

However, I agree that for now it is probably fine to let this bug
 slide, 
at least until it causes us a real problem.  Perhaps create a TODO.txt 
file in an appropriate place and record our email exchange in it?


